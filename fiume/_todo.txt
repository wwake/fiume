* Enforce positive value in edit*View
* Check signs when editing liability / expense
* Should "relative" be on Leia rather than Amount?
* Remove default type of unspecified
* Once "all" customers have updated, remove the input transformation
Make Leia know its type

* What if stream A depends on B and vice versa?
* Make date and scenario required for value computation
* Best UI for stream name since they might not exist yet but probably do
* Make amount an overrideable value on stream (?)
* Should Relative amounts be a separate top-level entity? (like Asset)
Amount

Remove override of entry by same name?
Error Reporting?    

Make DateRange.includes split out "<=" and ">" conditions

Variables

Growth
Inflation

Streams
* Allow dates to depend on death day
* Validate month is valid; end-date >= start-date [now we silently use zero for the amount]

Flows
* Add flows (in/out)

Design
* Maybe Possibilities should be a struct, regenerated as needed

Reports
* Refactor: split up net worth calculation - produce raw values, then the report
Net Income by Month

People
* Require distinct people names ?
* Do better when deleting a person with active Leias - at least strike through

Sections
* Add multiple sections
* Move to Plans with group vs [Plan] in various places - tree view requires MutableCollection
* Move streams between sections - see https://chriswu.com/posts/swiftui/multiplelistmove/

Calendar view (with RuleMark)

Editing
* Move streams (?)

FI-24-42: 2024-08-08 - Refactor Sign Calculations
* Store and read leiaType in Leia (Codable)
* Transform amount to positive value on input

FI-24-41: 2024-08-07 - Make LEIA Know Its Type
* Set leiaType when creating Leia in tests
* Set leiaType when creating Leia in prod code
* Update Leia on load so all have a leiaType (even if in old file format)

FI-24-40: 2024-08-06 - View % of Stream
* Preserve relative vs money in EditStream[Pool]View
* EditStream[Pool]View.createdAmount returns a relative amount
* Make Leia default amount_original to $0 on construction
* Relative amounts no longer need a scenario to edit/save them
* Preserve relative amount type when editing
* Now have relative amounts for streams or pools
* Show relative amount as %

FI-24-39: 2024-07-29 - % of Stream
* AmountView switches between MoneyAmountView and RelativeAmountView
* We ran into a challenge that we currently assume that a value is fixed; relative streams break that assumption

FI-24-38: 2024-07-25 - Relative Amounts
* Rename MoneySpecifier to Amount
* Add Amount helper constructor
* Work toward stream as % of another one

FI-24-37: 2024-07-24 - MoneySpecifier
* Make everybody who previously used Leia.amount work with a MoneySpecifier
* Remove original Leia init()
* Don't break persistence with this change
* Fixed initialization problem for our DateRangeView - turns out setting the same field twice in the init didn't update view

FI-24-36: 2024-07-23 - Refactor DateRange
* DateRange description used in PoolView and StreamView
* Extract DateRangeView used by EditStreamView and EditPoolView
* If date range is empty, use "". If not, use "" for an unchanged component.
* Label Leias with "Asset", "Income" etc.
* Negate value when editing expense or liability
* Make edit pages say "Update" "Pool"/whatever
* Delete people
* Create MoneySpecifier (simple amount only)

FI-24-35: 2024-07-22 - Testing without a Simulator?!
* Modified model files to be public (constructors, functions, etc.)
* Pulled model files into a new framework
* Adjusted view and test code to the new framework
* Turn off "run in host app" so tests run on the simulator but don't bring up the app at all. (Can even run if app is deinstalled.)
  Result: 6-7 s. to start simulator; ~3 s. to run tests.
  Previously - could take up to 30 seconds, almost always 10+
  Yay!
* Refactor: DateRange holding two DateSpecs

FI-24-34: 2024-07-15 - Net Worth - Pools and Streams
Pools
* Scenarios with pools

Test/Dev Environment
* Installed Jon's approach in https://qualitycoding.org/bypass-swiftui-app-launch-unit-testing/ - alternate main app with no persistence or view invoked

* Try framework approach to avoid simulator
https://stackoverflow.com/questions/70055110/disable-simulator-in-swiftui-unit-test
 - still ran the simulator / reverted


FI-24-33: 2024-07-11 - Pool Scenarios
* Refactor: merge Pool and Stream => LEIA
* Removed guard clause on Plan.append(); nothing uses it but it's not a problem either
* Refactor: rename because of "Leia"

FI-24-32: 2024-07-10 - Pools
Pools
* Create/Edit pool (Asset/liability)
* Display pool
* Editing pools

FI-24-31: 2024-07-09 - Edit People
Editing
* Clean up ThePlans use of new Plans()
* Try starting with name value for creating new Group or Scenarios
* Edit Persons
* Tried to turn off spell-checking on name fields - but runtime is ignoring our request

FI-24-30: 2024-07-08 - Edit Streams
* [offline] Adjusted codable output to remove observable info and improve names, following https://www.hackingwithswift.com/books/ios-swiftui/adding-codable-conformance-to-an-observable-class
* Edit group and scenario names
* Edit stream
* Try starting with "null value" for creating new Stream

FI-24-29: 2024-07-04 - Delete Streams
* Delete streams
* Make groups and scenarios get saved and read
* Fix problem where multiple buttons got triggered from a single click (delete and add on the group & scenario lines) - Solution add .buttonStyle(.plain)
* Delete groups
* Delete scenarios
* Tried using recursive List instead of OutlineGroup; dropped since no improvement
* Converted remaining tests to SwiftTesting; fixed non-snake-case names

FI-24-28: 2024-07-03 - File Names and Date Specs
Persistence
* Rename files to .json
* Make date spec use person id
* Handle when id not found
* Remove CustomStringConvertible from Person
* Remove use of name and birth year in DateSpecifier
* Eliminate Save button

Editing
* Add a delete button to each stream (non-functional so far)

FI-24-27: 2024-07-02 - Plan Persistence
* [offline] Installed Jon Reid's new test templates
* Persistence - Save to file after each change
  * Make save() work properly for Person and Plans - wasChanged needs to be cleared after open()
  * Make Plans save and load as Plans rather than [Plan]
  * Inline and remove Plans.append() and Plans.removeAll()
* Move add() functions from Possibilities to test module

FI-24-26: 2024-07-01 - Improve Persistence
* [offline] Fix all the previews (removing SwiftData references)
* Refactor I/O out of ContentView
* Better error handling on I/O
* Read file at app's opening
* Track a flag, changed when object changes; reset on save
* Save People to file when it changes
* Started work to save Plans when that changes

FI-24-25: 2024-06-20 - SwiftData?
* Removed all traces of SwiftData - it was just too hard to work with
* Removed Plan.parent - may need it later for editing
* Switch to JSON files instead for persistence - Person, Plan; Open and Save

FI-24-24: 2024-06-19 - Plan Persistence - Try, Try Again
* [offline] Check save() calls for exception thrown
* Converted Plan to be @Bindable rather than @Binding in PlanListView
* Try software-maintained relationship inverse for parent & children in Plan - still dies when trying to reconstitute persisted children under "My Finances"

FI-24-23: 2024-06-18 - Plan Persistence - Try Again
* Make ContentView own [Plan] rather than Possibilities
* Re-add our delete all database button
* We appear to have new Stream plans created, but can't see in database and it blows up when you try to disclose them

FI-24-22: 2024-06-17 - Plan Persistence
* Added parent id to Plan (to enable editing & 1-many relationships)
* Split out startDate to be owned by the app; possibilities no longer is
* Tried making a query for [Plan] in views and Possibilities; reverted

FI-24-21: 2024-06-13 - SwiftData Persistence
* Figure out Person's persistence
* Figure out Person's previews
* Delete People (no longer used)
* Provide a "Delete All" button to reset database

FI-24-20: 2024-06-12 - Persistence - Planxty in Views
* Figured out that Possibilities was relying on a semi-dead variable ("plan")
* Figured out that a view referenced wrong type of node
* Made sure scenarios and groups work, even when deep
* Rename Planxty => Plan
* Persistence - Tried making Possiblities a model object, needed Plan to be one too [to allow recursion]
* Made other classes Decodable
* Tried to activate modelContainer without success

FI-24-19: 2024-06-11 - Persistence - PlanTree â‡’ enum
Persistence
* Convert PlanTree to Plan enum [parallel change] - and node
* Convert PlanTree to Plan enum [parallel change] - or node
* Convert PlanTree to Planxty struct
* Update all sets of tests
* Need to decide which of the three representations will work for persistence

FI-24-18: 2024-06-10 - User Interface for the Ages
* [offline] Added environment(people) to previews that needed it.
* [offline] Make AgeSelector initialize onAppear() [temporarily removed]
* [offline] Rename project() to netWorth()
* Make AgeSelector work [it could only pick first name on list because selection state was optional]
* Make Person.birthYear required
* Make default year higher

Persistence
* Convert PlanTree to Plan enum [parallel change] - stream

FI-24-17: 2024-06-06 - Age-Based Dates
* Make Stream work for age at end of range
* Require birthdate on Person
* Start UI for selection by Age

FI-24-16: 2024-06-05 - Graph by MonthYear
* Make Graph work with MonthYear
* Clean out use of MonthNumber (in Stream and Scenario, and tests)
* Refactor the range of the graph
* Made Possibilities know the range to explore
* Introduce abbreviated constants for MonthYear eg. 2024.oct
* Make Stream work for age on birthdates

FI-24-15: 2024-06-04 - MonthNumber => MonthYear
* Manage by month/year:
  * Make MonthYear be Strideable
  * Make Possibilities pass down MonthYear
  * Split out Month as a separate enum
  * Scenario.project() needs range over MonthYear
  * Make StreamView use Date picker

FI-24-14: 2024-06-03 - People
* [offline] Changed "Family" to "People"
* [offline] Added colors for dark mode
* [offline] Changed stream color to transparent when amount = 0
* Introduced update(using:) to DateSpecifier to simplify Stream
* Add start date to Possibilities
* Changed "DateDescription.unspecified" to "unchanged"
* Add Age to DateSpecifier - equatable, update
* Add DateSpecifier.description
* Make DateSpecifier know the Person (for age)

FI-24-13: 2024-05-30 - MonthYear Picker
* Define a MonthYear picker
* Make it allow null ("known"?)
* Define a Person creator
* Add people

FI-24-12: 2024-05-29 - Named Scenarios
* Demo SwiftTesting framework
* Generate names for nested scenarios
* Show the names in the graph
* Group or scenario name is required

FI-24-11: 2024-05-28 - Enhanced Dates
* Make Stream's last date be a DateDescription, not an optional Int
* Make start date be a DateSpecifier
* Allow first month to be unspecified for stream
* Add names to generated scenarios

FI-24-10: 2024-05-27 - Income and Expenses
* Remove net() from PlanTree - no longer used
* Color streams based on their flow
* Enter stream as income or expense
* Validate new stream name not empty

FI-24-09: 2024-05-23 - Graphs for Alternatives
* Graph scenarios from the concrete plans
* Fix defect where "group" nodes didn't feed results to children left to right
* Add icons to tree nodes

FI-24-08: 2024-05-22 - Scenarios Class
* Rename ScenarioSet to Scenarios
* Change return values Set<Scenario> to Scenarios
* Encapsulate to Scenarios.scenarios (with new methods on Scenarios)

FI-24-07: 2024-05-21 - Handling Alternatives
* Rename to Possibilities and Scenarios
* Improve test naming
* Turn a plan with alternatives into a set of plans that don't use alternatives
  * Distinguish "and" nodes from "or" nodes
  * Build a concrete plan from a multi-scenario plan with "or" nodes
* Introduce ScenarioSet for Set<Scenario> arguments - might not need a set internally

FI-24-06: 2024-05-20 - Graphs & Combinatorics
* Bug in graph: Make sure net for stream only takes streams that are active that month (fixed PlanLeaf)
* Make Stream able to merge with identically-named streams [but not using it yet]
* Make Stream a struct
* Remove dead code "streams" from MultiScenarioPlan
* Turn a plan with alternatives into a set of plans that don't use alternatives
  * Give nodes a unique id and make tree use that
  * Build a concrete plan from a multi-scenario plan with only "leaf" nodes
  * Build a concrete plan from a multi-scenario plan with only "and" nodes

FI-24-05: 2024-05-16 - Alternative Scenarios
* Made PlanTree be an And-Or tree
* Make plan view able to add tree nodes - groups or scenarios

FI-24-04: 2024-05-15 - Tree Structure
* [Offline] Give each view its own sheet flag
* Tested our enum-based tree and found it didn't propagate info properly
* Spiked a struct version that didn't handle leaf types different from the interior nodes
* Removed the unsuccessful enum interface
* Developed PlanTree, a class-based tree (including backfilled tests)
* Made UI work with PlanTree

FI-24-03: 2024-05-14 - Edit Streams
* Did a spike for display and editing of tree
* Did a parallel change to support a new Plan2 that's an enum (rather than an array of Streams). This sets us up for AND/OR trees of streams (or other things).
* Started a parallel view change to display the plan as a tree

FI-24-02: 2024-05-13 - CRUDdy Streams
Make app able to run on ipad
Reorder streams
Delete stream
Add new stream to a plan
View all info for stream

FI-24-01: 2024-05-09 - Introducing Fiume
[Offline: set up initial project]
Create a plan, able to add streams to it
Add start and stop dates to streams
